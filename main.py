from telebot import TeleBot, types
from find_injure import matches_list, get_players_list, get_teams
from files_manager import into_csv_data, into_excel_data
import time
import os

bot = TeleBot("")


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç—á–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
def get_matches_in_page(matches, page):
    min_index = 10 * (page - 1)
    max_index = min_index + 10
    return matches[min_index:max_index]


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è
    inline_keyboard = types.InlineKeyboardMarkup()
    button_today = types.InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="today_matches")
    button_tomorrow = types.InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="tomorrow_matches")
    inline_keyboard.add(button_today, button_tomorrow)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π:",
        reply_markup=inline_keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
@bot.callback_query_handler(func=lambda call: call.data == "today_matches")
def handle_today_matches(call, page=1):
    matches = matches_list('f_4_0_3_ru_5')  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    handle_matches(call, matches, "today", page)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞"
@bot.callback_query_handler(func=lambda call: call.data == "tomorrow_matches")
def handle_tomorrow_matches(call, page=1):
    matches = matches_list('f_4_1_3_ru_5')  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    handle_matches(call, matches, "tomorrow", page)


# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ç—á–µ–π
def handle_matches(call, matches, day_type, page=1):
    total_pages = (len(matches) + 9) // 10  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    inline_keyboard = types.InlineKeyboardMarkup()

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –º–∞—Ç—á–µ–π –ø–æ –ª–∏–≥–∞–º
    sorted_matches = {}
    for match in matches:
        league = match['league']
        league_id = match['league_id']  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–∏–≥–∏
        if league_id not in sorted_matches:
            sorted_matches[league_id] = []
        sorted_matches[league_id].append(match)

    # –ö–Ω–æ–ø–∫–∏ –ª–∏–≥
    for league_id, league_matches in sorted_matches.items():
        league_button_data = f"league_{day_type}_{league_id}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ª–∏–≥–∏
        button = types.InlineKeyboardButton(
            text=f"–õ–∏–≥–∞ {league_id}",  # –ú–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å ID –∏–ª–∏ –∏–º—è –ª–∏–≥–∏
            callback_data=league_button_data
        )
        inline_keyboard.add(button)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 1:
        nav_buttons.append(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"{day_type}_page_{page - 1}"))
    if page < total_pages:
        nav_buttons.append(types.InlineKeyboardButton("‚û° –í–ø–µ—Ä–µ–¥", callback_data=f"{day_type}_page_{page + 1}"))
    if nav_buttons:
        inline_keyboard.add(*nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç"
    back_to_dates_button = types.InlineKeyboardButton(
        text="‚¨Ö –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç", callback_data="choose_dates"
    )
    inline_keyboard.add(back_to_dates_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if call.message:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π ({'–°–µ–≥–æ–¥–Ω—è' if day_type == 'today' else '–ó–∞–≤—Ç—Ä–∞'}), —Å—Ç—Ä. {page}/{total_pages}:",
            reply_markup=inline_keyboard
        )
    else:
        bot.send_message(
            chat_id=call.chat.id,
            text=f"–°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π ({'–°–µ–≥–æ–¥–Ω—è' if day_type == 'today' else '–ó–∞–≤—Ç—Ä–∞'}), —Å—Ç—Ä. {page}/{total_pages}:",
            reply_markup=inline_keyboard
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
@bot.callback_query_handler(func=lambda call: "_page_" in call.data)
def handle_page_callback(call):
    data = call.data.split("_")
    day_type = data[0]  # today –∏–ª–∏ tomorrow
    page = int(data[2])  # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
    matches = matches_list('f_4_0_3_ru_5') if day_type == "today" else matches_list('f_4_1_3_ru_5')

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    handle_matches(call, matches, day_type, page)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–∞—Ç—á–µ–π
@bot.callback_query_handler(func=lambda call: call.data.startswith("match_"))
def handle_match_callback(call):
    data = call.data.split("_")
    day_type = data[1]  # today –∏–ª–∏ tomorrow
    match_index = int(data[2])  # –ò–Ω–¥–µ–∫—Å –º–∞—Ç—á–∞
    matches = matches_list('f_4_0_3_ru_5') if day_type == "today" else matches_list('f_4_1_3_ru_5')  # –°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π
    match = matches[match_index]

    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ get_teams
    teams = get_teams(match['url'])

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–º–∞–Ω–¥
    inline_keyboard = types.InlineKeyboardMarkup()
    button_home = types.InlineKeyboardButton(
        text=f"{match['team_1']}",
        callback_data=f"team_home_{day_type}_{match_index}"
    )
    button_away = types.InlineKeyboardButton(
        text=f"{match['team_2']}",
        callback_data=f"team_away_{day_type}_{match_index}"
    )
    back_button = types.InlineKeyboardButton(
        text="‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–∞—Ç—á–µ–π", callback_data=f"{day_type}_page_{(match_index // 10) + 1}"
    )
    inline_keyboard.add(button_home, button_away)
    inline_keyboard.add(back_button)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –∫–Ω–æ–ø–∫–∏ –∫–æ–º–∞–Ω–¥
    bot.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Ç—á:\n{match['team_1']} - {match['team_2']}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=inline_keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("team_"))
def handle_team_callback(call):
    data = call.data.split("_")
    team_type = data[1]  # –¢–∏–ø –∫–æ–º–∞–Ω–¥—ã (home/away)
    day_type = data[2]  # today –∏–ª–∏ tomorrow
    match_index = int(data[3])  # –ò–Ω–¥–µ–∫—Å –º–∞—Ç—á–∞
    matches = matches_list('f_4_0_3_ru_5') if day_type == "today" else matches_list('f_4_1_3_ru_5')  # –°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π
    match = matches[match_index]

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_message = bot.send_message(chat_id=call.message.chat.id, text='–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üîÑ')

    # –ü–æ–ª—É—á–∞–µ–º URL –∫–æ–º–∞–Ω–¥—ã
    teams = get_teams(match['url'])
    team_url = teams[team_type]

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    players = get_players_list(team_url)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∏–≥—Ä–æ–∫–∞—Ö
    players_info = "\n".join(
        f"{player['name']} - {player['last_match']}\n"
        f"–ò: {player['matches_played']}, –ì: {player['goals']}, "
        f"–ü–µ—Ä: {player['assists']}, –û: {player['points']}"
        for player in players
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∏–≥—Ä–æ–∫–∞—Ö
    bot.delete_message(
        chat_id=call.message.chat.id,
        message_id=loading_message.message_id,
    )
    file_name = f'output_for_{call.message.chat.username}'
    csv_file = f'{file_name}.csv'
    excel_file = f'{file_name}.xlsx'
    into_csv_data(players, csv_file)
    into_excel_data(players, excel_file)

    try:
        with open(excel_file, 'rb') as file:  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ
            bot.send_document(call.message.chat.id, file)

    except FileNotFoundError:
        bot.send_message(call.message.chat.id, f"–§–∞–π–ª {excel_file} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –Ω–∞–ª–∏—á–∏–µ.")
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    try:
        with open(csv_file, 'rb') as file:  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ
            bot.send_document(call.message.chat.id, file)

    except FileNotFoundError:
        bot.send_message(call.message.chat.id, f"–§–∞–π–ª {csv_file} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –Ω–∞–ª–∏—á–∏–µ.")
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    if os.path.exists(csv_file):
        os.remove(csv_file)

    if os.path.exists(excel_file):
        os.remove(excel_file)


@bot.callback_query_handler(func=lambda call: call.data == "choose_dates")
def handle_choose_dates(call):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç
    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(
        types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="today_page_1"),
        types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="tomorrow_page_1")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç—á–µ–π:",
        reply_markup=inline_keyboard
    )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
while True:
    try:
        bot.polling(allowed_updates=["message", "callback_query"], timeout=100, long_polling_timeout=100)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        time.sleep(5)

def get_next_seven_dates():
    today = datetime.today()
    dates = []

    for i in range(1, 8):
        date = today + timedelta(days=i)
        dates.append(date.strftime('%d/%m'))

    return dates